<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Nathan Knowler</title>
        <link>https://knowler.dev/</link>
        <description>Some words.</description>
        <lastBuildDate>Tue, 29 Aug 2023 04:50:35 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Remix</generator>
        <language>en-CA</language>
        <copyright>All rights reservered 2022, Nathan Knowler</copyright>
        <item>
            <title><![CDATA[Extending HTML Form Validation]]></title>
            <link>https://knowler.dev/blog/extending-html-form-validation</link>
            <guid>extending-html-form-validation</guid>
            <pubDate>Wed, 23 Nov 2022 01:26:11 GMT</pubDate>
            <description><![CDATA[A quick and practical introduction for using the Constraint Validation API to extend HTML Form Validation.]]></description>
            <content:encoded><![CDATA[<p>HTML is awesome; it includes so much out-of-the-box. For example,
<code>&#x3C;form></code> will validate its controls upon submission and report if there
are any validation errors. You can use attributes like <code>required</code>,
<code>maxlength</code>, <code>pattern</code>, etc. to set the validation for different fields.
While these can get you pretty far, sometimes you might want to provide
some more complex validation. Often, this is where developers plop
<code>novalidate</code> on the <code>&#x3C;form></code> element and then use full replacement for
the browser’s built-in validation. Instead of replacing it, you can use
the Web platform’s Constraint Validation API to extend the built-in
functionality.</p>
<h2 id="using-the-constraint-validation-api">Using the Constraint Validation API</h2>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Constraint_validation">Constraint Validation
API</a>
allows one to add custom complex validation in their forms (among other
things not described in this post).</p>
<p>Here’s an example: there are two text inputs that you want to be unique
from each other. We’ll wrap them in a custom element, since they are
great for bundling up this sort of functionality.</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">form</span>></span>
	<span class="hljs-tag">&#x3C;<span class="hljs-name">unique-values</span>></span>
		<span class="hljs-tag">&#x3C;<span class="hljs-name">fieldset</span>></span>
			<span class="hljs-tag">&#x3C;<span class="hljs-name">legend</span>></span>Unique values<span class="hljs-tag">&#x3C;/<span class="hljs-name">legend</span>></span>
			<span class="hljs-tag">&#x3C;<span class="hljs-name">label</span>></span>A <span class="hljs-tag">&#x3C;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"a"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">label</span>></span>
			<span class="hljs-tag">&#x3C;<span class="hljs-name">label</span>></span>B <span class="hljs-tag">&#x3C;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"b"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">label</span>></span>
		<span class="hljs-tag">&#x3C;/<span class="hljs-name">fieldset</span>></span>
	<span class="hljs-tag">&#x3C;/<span class="hljs-name">unique-values</span>></span>
	<span class="hljs-tag">&#x3C;<span class="hljs-name">button</span>></span>Submit<span class="hljs-tag">&#x3C;/<span class="hljs-name">button</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">form</span>></span>
</code></pre>
<p>Now, let’s scaffold the custom element and listen for the <code>input</code> event
on the <code>&#x3C;fieldset></code>:</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UniqueValues</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">HTMLElement</span> {
  <span class="hljs-keyword">get</span> <span class="hljs-title function_">fieldset</span>() { <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">':scope > fieldset'</span>); }

  <span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) {
		<span class="hljs-variable language_">this</span>.<span class="hljs-property">fieldset</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'input'</span>, <span class="hljs-function"><span class="hljs-params">event</span> =></span> {
			<span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> set and report the validity.</span>
		});
  }
}

<span class="hljs-variable language_">window</span>.<span class="hljs-property">customElements</span>.<span class="hljs-title function_">define</span>(<span class="hljs-string">'unique-values'</span>, <span class="hljs-title class_">UniqueValues</span>);
</code></pre>
<p>The Constraint Validation API provides a few methods for setting,
checking, and reporting validity. We’ll use
<code>.setCustomValidity(message)</code> and <code>.reportValidity()</code>. The first allows
us to set a custom error message. The second is what spawns the tooltip
on a form control.</p>
<p>We’ll use the <code>input</code> event as our validation logic isn’t very costly
performance-wise. This also follows how HTML seems to work. If you want
to see for yourself, use CSS to style the <code>:invalid</code> state of a form
control with one the basic HTML validation constraints (e.g. <code>required</code>,
<code>minlength</code>, <code>pattern</code>). The validity is checked as the input changes.</p>
<p>In the <code>input</code> event handler for <code>&#x3C;fieldset></code>, we can compare the values
of both nested controls, then set and report the validity accordingly.</p>
<pre><code class="hljs language-javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">fieldset</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'input'</span>, <span class="hljs-function"><span class="hljs-params">event</span> =></span> {
	<span class="hljs-keyword">const</span> {a, b} = event.<span class="hljs-property">currentTarget</span>.<span class="hljs-property">elements</span>;

	<span class="hljs-keyword">if</span> (a.<span class="hljs-property">value</span> === b.<span class="hljs-property">value</span>) {
		<span class="hljs-comment">// If the values are the same, set the error, and report it on</span>
		<span class="hljs-comment">// the current form control.</span>
		a.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">'A and B must be unique.'</span>);
		b.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">'A and B must be unique.'</span>);
		event.<span class="hljs-property">target</span>.<span class="hljs-title function_">reportValidity</span>();
	} <span class="hljs-keyword">else</span> {
		<span class="hljs-comment">// If the values aren’t the same, clear the error on each</span>
		<span class="hljs-comment">// control.</span>
		a.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">''</span>);
		b.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">''</span>);
	}
});
</code></pre>
<p>Now, if you pay close attention to how HTML’s built-in validation works,
you’ll notice that the tooltip doesn’t show until a submission attempt
is made. I’m not presenting any hard opinion about whether or not you
should do the same. That’s a decision that’s best determined by research
and context, but that’s outside of the scope of this blog post.</p>
<p>You’ll also notice that HTML’s validation also takes place when the
elements are first added to a page. We can move the event listener
callback into a method.</p>
<pre><code class="hljs language-javascript"><span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) {
	<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">validate</span>();
	<span class="hljs-variable language_">this</span>.<span class="hljs-property">fieldset</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'input'</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">validate</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));
}

<span class="hljs-title function_">validate</span>(<span class="hljs-params">event</span>) {
	<span class="hljs-keyword">const</span> {a, b} = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fieldset</span>.<span class="hljs-property">elements</span>; <span class="hljs-comment">// Might as well use fieldset</span>

	<span class="hljs-keyword">if</span> (a.<span class="hljs-property">value</span> === b.<span class="hljs-property">value</span>) {
		a.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">'A and B must be unique.'</span>);
		b.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">'A and B must be unique.'</span>);
		<span class="hljs-comment">// We’ll optionally chain the report call as the event won’t be</span>
		<span class="hljs-comment">// there on page load and it shouldn’t report immediately anyway.</span>
		event?.<span class="hljs-property">target</span>.<span class="hljs-title function_">reportValidity</span>();
	} <span class="hljs-keyword">else</span> {
		a.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">''</span>);
		b.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">''</span>);
	}
}
</code></pre>
<p>Now, here is the code altogether. Remember, this is just a demo. This
code is not as robust as it could be (e.g. there are checks I’ve
left out, missing teardown, and it’s not very reusable).</p>
<pre><code class="hljs language-html"><span class="hljs-tag">&#x3C;<span class="hljs-name">form</span>></span>
	<span class="hljs-tag">&#x3C;<span class="hljs-name">unique-values</span>></span>
		<span class="hljs-tag">&#x3C;<span class="hljs-name">fieldset</span>></span>
			<span class="hljs-tag">&#x3C;<span class="hljs-name">legend</span>></span>Unique values<span class="hljs-tag">&#x3C;/<span class="hljs-name">legend</span>></span>
			<span class="hljs-tag">&#x3C;<span class="hljs-name">label</span>></span>A <span class="hljs-tag">&#x3C;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"a"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">label</span>></span>
			<span class="hljs-tag">&#x3C;<span class="hljs-name">label</span>></span>B <span class="hljs-tag">&#x3C;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"b"</span>></span><span class="hljs-tag">&#x3C;/<span class="hljs-name">label</span>></span>
		<span class="hljs-tag">&#x3C;/<span class="hljs-name">fieldset</span>></span>
	<span class="hljs-tag">&#x3C;/<span class="hljs-name">unique-values</span>></span>
	<span class="hljs-tag">&#x3C;<span class="hljs-name">button</span>></span>Submit<span class="hljs-tag">&#x3C;/<span class="hljs-name">button</span>></span>
<span class="hljs-tag">&#x3C;/<span class="hljs-name">form</span>></span>
<span class="hljs-tag">&#x3C;<span class="hljs-name">script</span>></span><span class="javascript">
<span class="hljs-keyword">class</span> <span class="hljs-title class_">UniqueValues</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">HTMLElement</span> {
  <span class="hljs-keyword">get</span> <span class="hljs-title function_">fieldset</span>() { <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">':scope > fieldset'</span>); }

	<span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) {
		<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">validate</span>();
		<span class="hljs-variable language_">this</span>.<span class="hljs-property">fieldset</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">'input'</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">validate</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>));
	}

	<span class="hljs-title function_">validate</span>(<span class="hljs-params">event</span>) {
		<span class="hljs-keyword">const</span> {a, b} = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fieldset</span>.<span class="hljs-property">elements</span>;

		<span class="hljs-keyword">if</span> (a.<span class="hljs-property">value</span> === b.<span class="hljs-property">value</span>) {
			a.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">'A and B must be unique.'</span>);
			b.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">'A and B must be unique.'</span>);
			event?.<span class="hljs-property">target</span>.<span class="hljs-title function_">reportValidity</span>();
		} <span class="hljs-keyword">else</span> {
			a.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">''</span>);
			b.<span class="hljs-title function_">setCustomValidity</span>(<span class="hljs-string">''</span>);
		}
	}
}

<span class="hljs-variable language_">window</span>.<span class="hljs-property">customElements</span>.<span class="hljs-title function_">define</span>(<span class="hljs-string">'unique-values'</span>, <span class="hljs-title class_">UniqueValues</span>);
</span><span class="hljs-tag">&#x3C;/<span class="hljs-name">script</span>></span>
</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[I’m on Mastodon]]></title>
            <link>https://knowler.dev/blog/im-on-mastodon</link>
            <guid>im-on-mastodon</guid>
            <pubDate>Sat, 05 Nov 2022 05:44:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>While I’ve only recently <a href="https://twitter.com/kn_wler/status/1556097942196568065">rejoined Twitter</a>, I’ll most likely be spending more time on Mastodon. <a href="https://sunny.garden/@knowler">@knowler@sunny.garden</a> is where you can find me.</p>
<p><strong>P.S.</strong> I’ll be blogging more hopefully. Been investing a lot more in my website lately. I set up Webmentions so I can receive those now — though I will be processing them manually. One day I’m make it automated. I’d like to start micro-blogging on here as well. So much to do. One thing at a time though, haha.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Managing Event Listeners in Custom Elements]]></title>
            <link>https://knowler.dev/blog/managing-event-listeners-in-custom-elements</link>
            <guid>managing-event-listeners-in-custom-elements</guid>
            <pubDate>Thu, 06 Oct 2022 23:33:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>When managing event listeners in custom elements, there tends to be a
bit of boilerplate that needs to be done for <em>every</em> event listener:</p>
<ul>
<li>Storing the bound event listener as a property of the class inevitably
in the constructor (so remember to call <code>super()</code>);</li>
<li>Adding the event listener;</li>
<li>Removing the event listener.</li>
</ul>
<p>It might not seem like a lot, but your custom element’s class can easily
get a bit bloated.</p>
<p>A little known and newer feature of <a href="http://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><code>EventTarget.addEventListener()</code></a>
is the <code>signal</code> property in the options object which it takes as a third
paramter. It expects an <a href="http://developer.mozilla.org/en-US/docs/Web/API/AbortSignal"><code>AbortSignal</code></a> which it will use to remove
the event listener. You can get and call an <code>AbortSignal</code> with an
<a href="http://developer.mozilla.org/en-US/docs/Web/API/AbortController"><code>AbortController</code></a>. I store this on a base class which extends
<code>HTMLElement</code>, create an easy accessor for the <code>AbortSignal</code>, and then
call <a href="http://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort"><code>AbortController.abort()</code></a> in <code>disconnectedCallback()</code>:</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseElement</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">HTMLElement</span> {
	#disconnectionController = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();

	disconnectSignal = <span class="hljs-variable language_">this</span>.#disconnectionController.<span class="hljs-property">signal</span>;

	<span class="hljs-title function_">disconnectedCallback</span>(<span class="hljs-params"></span>) {
		<span class="hljs-variable language_">this</span>.#disconnectionController.<span class="hljs-title function_">abort</span>(<span class="hljs-string">"element disconnected"</span>);
	}
}
</code></pre>
<p>My custom elements can just extend the base element class and use the
<code>AbortSignal</code> when adding event listeners:</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyButton</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">BaseElement</span> {
	<span class="hljs-keyword">get</span> <span class="hljs-title function_">button</span>() {
		<span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">':scope > button'</span>);
	}

	<span class="hljs-title function_">connectedCallback</span>(<span class="hljs-params"></span>) {
		<span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-title function_">addEventListener</span>(
			<span class="hljs-string">'click'</span>,
			<span class="hljs-variable language_">this</span>.#onClick.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>),
			{ <span class="hljs-attr">signal</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">disconnectSignal</span> },
		);
	}

	#<span class="hljs-title function_">onClick</span>(<span class="hljs-params">event</span>) { <span class="hljs-comment">/* Handle event */</span> }
}
</code></pre>
<p>Since you don’t need to remove the event listener manually, you can even
use a closure instead of creating a class method. It’s up to you.</p>
<h2 id="browser-support">Browser Support</h2>
<p>If you don’t need to support Safari prior to 15 on macOS and iOS then
you are good to go. <a href="https://caniuse.com/mdn-api_eventtarget_addeventlistener_options_parameter_options_signal_parameter">Take a look at the support table</a>.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2020 in music]]></title>
            <link>https://knowler.dev/blog/2020-in-music</link>
            <guid>2020-in-music</guid>
            <pubDate>Wed, 30 Dec 2020 23:10:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I listened to a lot of music this year. I believe in someways this year music
was a lot more meaningful to me this year and the albums I treasured the most
seem to reflect that, though they might be surprising.</p>
<h2 id="favourite-albums-of-the-year">Favourite albums of the year</h2>
<p>I’ll keep my comments to a minimum, but here are my favourite albums I listened
it to this year.</p>
<h3 id="1-brain-pain-by-four-year-strong">1. <em>Brain Pain</em> by Four Year Strong</h3>
<p>I love the energy of this album and I feel like I can just put it on anytime.</p>
<h3 id="2-people-with-dreams-by-john-mark-mcmillan">2. <em>People with Dreams</em> by John Mark McMillan</h3>
<p>This album will always remind me of our home in Calgary. It was the home my
daughter was a newborn in and despite the lonliness of lockdown, the summer was
bright and she brought sweetness to life as well.</p>
<h3 id="3-a-beautiful-place-to-drown-by-silverstein">3. <em>A Beautiful Place To Drown</em> by Silverstein</h3>
<h3 id="4-afterburner-by-dance-gavin-dance">4. <em>Afterburner</em> by Dance Gavin Dance</h3>
<p>I’d say this was my most anticipated album of the year and to be honest it
didn’t quite live up to my expectation for it, but I still loved it and listened
to it a ton nonetheless.</p>
<h3 id="5-the-new-abnormal-by-the-strokes">5. <em>The New Abnormal</em> by The Strokes</h3>
<p>I listened to this album a ton when we were all just adjusting to life in the
pandemic. We went to stay with my parents for a month and the early summer
weather combined with Okanagan backdrop made it a very enjoyable listen. I
remember going for a few drives where my daughter and I listened to this until
she fell asleep.</p>
<h2 id="favourite-non-2020-albums-of-the-year">Favourite non-2020 albums of the year</h2>
<ol>
<li><em>A Different Shade of Blue</em> by Knocked Loose (2019)</li>
<li><em>Science Fiction</em> by Brand New (2017)</li>
<li><em>Die On Mars</em> by The Callous Daoboys (2019)</li>
</ol>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Bookmarklet: Open GitHub Repo in CodeSandbox]]></title>
            <link>https://knowler.dev/blog/open-in-codesandbox-bookmarklet</link>
            <guid>open-in-codesandbox-bookmarklet</guid>
            <pubDate>Wed, 15 Jan 2020 01:37:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Just thought I’d share this helpful little bookmarklet I made
for opening a GitHub repo in CodeSandbox.</p>
<p>Just drag the link into your bookmarks toolbar.</p>
<p><a href="javascript:void(location.hostname === 'github.com' && open(`https://codesandbox.io/s/github${location.pathname}`))" title="Drag me into your bookmarks toolbar">Open in CodeSandbox</a></p>
<p>Here is the raw code for it. Any improvements are welcome!</p>
<pre><code class="hljs language-js"><span class="hljs-attr">javascript</span>:<span class="hljs-title function_">void</span>(location.<span class="hljs-property">hostname</span> === <span class="hljs-string">'github.com'</span> &#x26;&#x26; <span class="hljs-title function_">open</span>(<span class="hljs-string">`https://codesandbox.io/s/github<span class="hljs-subst">${location.pathname}</span>`</span>))
</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Introduction to Clover]]></title>
            <link>https://knowler.dev/blog/introduction-to-clover</link>
            <guid>introduction-to-clover</guid>
            <pubDate>Tue, 05 Mar 2019 10:57:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I wrote a post about Clover, a WordPress plugin boilerplate, I’ve been working on with Roots. <a href="https://roots.io/a-workflow-for-modern-wordpress-plugin-development/">Check it out on the Roots blog</a>.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[gg: a Git directory jumping helper]]></title>
            <link>https://knowler.dev/blog/gg-a-git-directory-jumping-helper</link>
            <guid>gg-a-git-directory-jumping-helper</guid>
            <pubDate>Fri, 22 Feb 2019 14:20:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Large projects and mono repos can be a pain to navigate. <strong>gg</strong>
is a small script I use almost everyday to make it easier.</p>
<p>If you’ve ever worked with WordPress — or really most CMSes for
that matter — the base application configuration, themes,
plugins, etc. are typically given their own sub directories to
help isolate them. For WordPress development, I use the
<a href="https://roots.io">Roots</a> stack and it does a great job of
making the project structure relavant, however, since it is
still WordPress, the project structure is not exactly flat.
Often I’ll need to jump to Trellis’ directory to start the
development VM, run a deploy, or update an environment’s
configuration, but shortly after jump back to the directory of
the theme or plugin I’m working on. Remembering the level of
depth and simply writing out the path can be a tedious and
erroneous task.</p>
<h2 id="a-simple-solution">A simple solution</h2>
<p><strong>gg</strong> is a very simple Bash script I wrote to make is 100%
easier to jump between directories in a large project. Here’s a
short clip of it in action with a Roots project:</p>
<p>{{ youtube(id="w0SjUNTfzKk", class="youtube") }}</p>
<h2 id="breaking-down-the-script">Breaking down the script</h2>
<p>There are a few requirements you will need before you get started:</p>
<p><strong>Requirements</strong>: <code>git</code>, <a href="https://github.com/junegunn/fzf"><code>fzf</code></a>, <a href="https://github.com/sharkdp/fd"><code>fd</code></a>, <a href="https://github.com/ggreer/the_silver_searcher"><code>ag</code></a></p>
<p>You most likely should be able to achieve the same thing with
built-in tools or alternatives to <code>fd</code> and <code>ag</code> (maybe even
<code>fzf</code>), but for this tutorial, I’ll use the tools listed above.
One note before diving into the script, I do have the following
set for my FZF default command:</p>
<pre><code class="hljs language-bash"><span class="hljs-built_in">export</span> FZF_DEFAULT_COMMAND=<span class="hljs-string">'ag -g ""'</span>
</code></pre>
<p>The script itself is pretty simple. There are two parts to it.
First, if we want to see all of the directories within our
project, even if we are already in a nested directory, we will
need to jump to the root of the Git repo. Luckily, it is
relatively easy to do this with Git. Using Git’s <code>rev-parse</code>
subcommand with the <code>--show-toplevel</code> flag, we can get “the
absolute path of the top-level-directory.” Since this is useful
in itself, but still a tad cumbersome to remember and write out,
we’ll create a function for it:</p>
<pre><code class="hljs language-bash"><span class="hljs-function"><span class="hljs-title">gr</span></span>() {
  <span class="hljs-built_in">cd</span> `git rev-parse --show-toplevel`
}
</code></pre>
<p>If you already have a set of Git-aliases, you might find naming
conflicts with the ones I will create in this tutorial and in
that case, or in the case you don’t like the names I’ve picked,
you will need to use a different name.</p>
<p>The next step is to create an easy way to find a sub-directory.
If you’ve ever used a fuzzy-search tool, you’ll know that that
they are pretty great. Knowing the fuzzy-search capabilities of
<code>fzf</code>, I know I can do something like <code>cd $(fzf)</code> to almost
achieve what we’re looking for, however, that finds directories
and files, the latter of which we do not need. Luckily, we can
use a finder tool with <code>fzf</code> to get what we need. I’ll use <code>fd</code>
to achieve this:</p>
<pre><code class="hljs language-bash"><span class="hljs-function"><span class="hljs-title">gd</span></span>() {
  <span class="hljs-built_in">cd</span> `
    fd --<span class="hljs-built_in">type</span> d --hidden --follow --exclude .git \
    | fzf --preview <span class="hljs-string">"ls -Ap {}"</span>
  `
}
</code></pre>
<p>We are telling <code>fd</code> to just find directories, follow symbolic
links, allow hidden directories, but exclude the <code>.git</code>
directory. Luckily, <code>fd</code> already respects <code>.gitignore</code> so we do
not need to worry about dependencies or build files polluting
our search selection. Also, we are making it fancy with a
preview window of the selected directory’s contents.</p>
<p>I prefer to leave these as separate functions in case I want to
just jump to the Git repo root or jump to a sub-directoy within
the current directory. For the final <code>gg</code> command, we can just
use an alias:</p>
<pre><code class="hljs language-bash"><span class="hljs-built_in">alias</span> gg=<span class="hljs-string">"gr &#x26;&#x26; gd"</span>
</code></pre>
<p>And that’s it. Here’s the full and final script:</p>
<pre><code class="hljs language-bash"><span class="hljs-meta">#!/usr/bin/env bash</span>

<span class="hljs-comment"># Go to Git root</span>
<span class="hljs-function"><span class="hljs-title">gr</span></span>() {
  <span class="hljs-built_in">cd</span> `git rev-parse --show-toplevel`
}

<span class="hljs-comment"># Go to sub-directory</span>
<span class="hljs-function"><span class="hljs-title">gd</span></span>() {
  <span class="hljs-built_in">cd</span> `
    fd --<span class="hljs-built_in">type</span> d --hidden --follow --exclude .git \
    | fzf --preview <span class="hljs-string">"ls -Ap {}"</span>
  `
}

<span class="hljs-comment"># Go to a directory within the current Git repository</span>
<span class="hljs-built_in">alias</span> gg=<span class="hljs-string">"gr &#x26;&#x26; gd"</span>
</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Rust For A Rusty Game Developer]]></title>
            <link>https://knowler.dev/blog/rust-for-a-rusty-game-developer</link>
            <guid>rust-for-a-rusty-game-developer</guid>
            <pubDate>Thu, 31 Jan 2019 16:31:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Rust is my first foray into a systems programming language since
highschool and even then I never went in past my toes. This is
the introduction of a series of posts I’ll make as I document my
experience of learning Rust.</p>
<h2 id="the-aspiring-game-developer">The Aspiring Game Developer</h2>
<p>I remember wanting to learn C++, because that's what the
professional game developers were using. I was an impatient
teenager though — I just wanted to make games — and I ended up
settling with an ActionScript 3 library called <a href="http://useflashpunk.net">FlashPunk</a>. I
used AS3 a lot and did end up learning a lot of foundational
programming concepts through it (it takes a lot from Java; AS2
was more JavaScript-y). When I went to college I jumped back to
the web (my stomping ground), because there weren’t a lot of
ways I knew how to use my game development skills. Everyone
needed a website, so I embraced my new role as everyone’s web
developer.</p>
<h2 id="why-a-systems-programming-language">Why a Systems Programming Language?</h2>
<p>Over the last 4-5 years, I have become obsessed with speed and
performance. How did I become this way? By living in a rural
town in the middle of nowhere Saskatchewan for 4 years. When I
got there I didn’t have any cell reception and the WiFi was
horrible and though it did improve during my time there, I
became keenly aware of the frustrations of living with a
sub-sub-par Internet connection. This experience has been
guiding for me as I dive deeper into programming. <strong>I want to
build products that everyone, anywhere can access — no matter
what difficulties may befall them.</strong> That brings me to what I’ve
noticed. A theme in a lot of software these days is a lack of
performance. Much of modern software is web-based in some way
and that's really great if you are a web developer or need to
ship software to as many targets as possible, but please stop
using so much memory. Yes, I’m looking at you <em>Electron</em> 👀.
Anyway, I’d like to learn a systems programming language so I
can build more efficient software. <code>&#x3C;/rant></code></p>
<h2 id="why-not-c">Why Not C++?</h2>
<p>When I was deciding to into a deeper programming language, I
first jumped to C++ because I had some familarity with it and it
is so popular. It was hard to feel like I was getting anywhere
after a week though. I had become accustomed to the ecosystems
that I knew from Node and PHP, but there seemed to be no such
thing for C++. I realized that the language was pre-Internet and
it didn’t have the opportunity for a centralized ecosystem to
catch on — by the time the Internet came around everyone had
developed their own ways of managing dependencies. <strong>Attempting
to learn C++ was a lonely experience.</strong> I needed something that
had a thriving ecosystem if I was going to catch any sort of
momentum in my learning.</p>
<h2 id="why-rust">Why Rust?</h2>
<p>I had heard of Rust through following <a href="https://twitter.com/yoshuawuyts">Yoshua Wuyts on
Twitter</a>. I had discovered him
through being a fly on the wall in the communities that
surrounded Tachyons and functional CSS. Since I trusted his
fascination with performance, I became interested in Rust and it
was the first language that came to mind when I started feeling
lonely learning C++. Rust was very much the opposite of what I
found with C++: the community is thriving, there are plenty of
official, well maintained resources for learning the language,
the ecosystem is well established — despite being a relatively
young language — and the tooling is fantastic. <strong>While Rust can
feel like a decently steep learning curve, the community and
ecosystem cushion that, make it easy to gain momentum when
learning.</strong></p>
<h2 id="resources-ive-found-helpful">Resources I’ve Found Helpful</h2>
<p>The following are some resources I’ve found helpful as I’ve
learnt Rust. Let it be a guide to the Rust ecosystem if you’re
brand new.</p>
<h3 id="books">Books</h3>
<p>I began reading <em><a href="https://doc.rust-lang.org/book">The Rust Programming Language</a></em> in August.
Though, as I read, I did find it difficult to figure out what I
could use Rust for that wasn’t too far fetched for a beginner
(i.e. making a game), the book did include some great exercises
which helped me get the underlying theories and values which are
core to Rust as a language. The final project in the book was a
multi-threaded web server and it was my motivation to finish
reading 😂. Overall, I would recommend the book to anyone
wanting to begin with Rust. Sure you might want something that
is more practical and has less theory, but if you take the time
to read the book, you’ll understand why Rust is the way it is.
After reading the book, I discovered <em><a href="https://doc.rust-lang.org/rust-by-example">Rust By Example</a></em> which
satisfies the desire for a resource that is more practical and
straightforward; a great reference to keep while programming in
Rust.</p>
<h3 id="documentation">Documentation</h3>
<p><a href="https://docs.rs">Docs.rs</a> is amazing. They have done such a good job of
centralizing all of the documentation, information, and links
regarding any crate you pick up.</p>
<p><img src="/images/docs-rs-crate-overview.png" alt=""></p>
<h2 id="projects">Projects</h2>
<p>So far, the most immediate need that I’ve discovered that I can
use Rust for is commandline-interfaces. I have more than a few
Bash scripts lying around which I’ve been wanting to refactor
and I’ve begun using Rust for that. So far I’ve been using
<a href="https://github.com/TeXitoi/structopt">StructOpt</a> as a library for building <a href="https://github.com/knowler/roots-cli-rust">quick little CLIs for
everyday tasks</a>.</p>
<p>This blog project in itself has been a fun chance to learn Rust.
I chose <a href="https://getzola.org">Zola</a> as the static site generator and it's been a
pretty smooth experience so far. It's able to deploy to Netlify
which is always great. As a little fun project I built <a href="https://github.com/knowler/words#cli-helper">a CLI for
scaffolding new posts</a>,
which should serve me as I continue to blog. I've found <a href="https://tera.netlify.com">Tera</a>
— a Jinja inspired templating language to be a great asset for
that type of project.</p>
<h2 id="future-goals">Future Goals</h2>
<p>I think as a big goal, I’d love to build a 2d platformer. I’ve
always loved 2d games and that's much of what I built when I
used to make games.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[2018 in music and a look to the future]]></title>
            <link>https://knowler.dev/blog/2018-in-music</link>
            <guid>2018-in-music</guid>
            <pubDate>Mon, 31 Dec 2018 19:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I love rounding up my favourite albums at the end of the year and that time has finally come for 2018. I’ll also take a look into what I’m anticipating in 2019.</p>
<h2 id="favourite-albums-of-the-year">Favourite albums of the year</h2>
<p>There seemed to be a lot of metalcore releases this year. Of course that’s not all I listen to, but will definitely reflect in my list. I’m going with a weird number — 4 albums — for my best of 2018 list. Here we go:</p>
<h3 id="4-untitled-by-mewithoutyou">4. [Untitled] by mewithoutYou</h3>
<p>This album surprised me a lot. First of all, it came out of nowhere; it was released very quickly. Second of all, the EP they released before it made me think it would have a similar sound — kinda soft and folky — but no, right from the first track — 9:27 7/29 a.m. — this album rips. This album also includes a lot of really cool post-rock-y ambient sequences (notably on "Michael, Row Your Boat Ashore"). Overall, I’m super impressed with this dynamic addition to mewithoutYou’s wonderful discography.</p>
<p><strong>Favourite track:</strong> <a href="https://www.youtube.com/watch?v=e6Em3PlrwjE">"Wendy &#x26; Betsy"</a></p>
<h3 id="3-holy-hell-by-architects">3. Holy Hell by Architects</h3>
<p>I don’t think I’m going to be able to do justice with words how meaningful this record is. Holy Hell is packed with emotion. Architects has been known for this type of emotion, but this album was a whole new level in light of the passing of founding guitarist Tom Searle in 2016. Now the band has taken the time to process their grief and the resulting album is amazing tribute to Tom. I’ve lost count how many time I’ve listened to this cover to cover. Rest in peace Tom.</p>
<p><strong>Favourite track:</strong> <a href="https://www.youtube.com/watch?v=HNpWuwSVyDk">"Royal Beggars"</a></p>
<h3 id="2-empty-black-by-greyhaven">2. Empty Black by Greyhaven</h3>
<p>I had never heard of this band until I see a tweet from Garett in Silent Planet saying to check them out. They did not disappoint, in fact, I listened to this album <em>a ton</em>. Greyhaven does a great job of blending a lot of sounds and as a consequence have a very unique sound and voice in their music. This band is for lovers of Every Time I Die, The Dillinger, Escape Plan, Norma Jean, or The Chariot — anything that rips.</p>
<p><strong>Favourite track:</strong> <a href="https://www.youtube.com/watch?v=ZUGi7NDNWds">"Broadcast Network"</a></p>
<h3 id="1-time-will-die-and-love-will-bury-it-by-rolo-tomassi">1. Time Will Die and Love Will Bury It by Rolo Tomassi</h3>
<p>I only started listening to Rolo Tomassi with their last album, Grievences, and they for sure filled the jazzy, shoegaze, mathcore craving I never knew I had.</p>
<p>When this album was released I went for a drive and listened to it in its entirely — twice — it was that good. The band ebbs and flows in and out of spacey ambience throughout the entire album. This record contains some of their heaviest sequences yet. Eva Spence is the most dynamic vocalist in prog music — <em>seriously</em>. She seamless transitions from the deep growls to the light, airy vocals. I would definitely recommend checking out this record and the rest of Rolo Tomassi’s discography.</p>
<p><strong>Favourite track(s):</strong> <a href="https://rolotomassi.bandcamp.com/track/balancing-the-dark">"Balancing the Dark"</a> and <a href="https://rolotomassi.bandcamp.com/track/alma-mater">"Alma Mater"</a> (together) — amazing.</p>
<h2 id="a-look-to-the-future-2019">A look to the future: 2019</h2>
<p>The almighty <strong>Norma Jean</strong> is recording a new album right now. They’re my mainstay, so I’m pumped for new jams from them. I probably spin their entire discography at least twice a month. Will <strong>Oh, Sleeper</strong> finally release a new album? I hope so and their latest single is a good sign. Finally, I really hope to see a new album from <strong>As Cities Burn</strong>. I have no expectation for what it to sound like — I love all of their previous albums despite how different they all are.</p>
<p>Personally, a goal I’m making for myself in 2019 is to write more in-depth reviews of new music throughout the year. Hopefully, by this time next year, I can share a much fuller year in review for music.</p>
<p>Anyways, that's my list and my hopes for 2019. See you in the new year. 🎉</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hello, World!]]></title>
            <link>https://knowler.dev/blog/hello-world</link>
            <guid>hello-world</guid>
            <pubDate>Mon, 31 Dec 2018 16:30:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>What is this? This is a place for me to turn my thoughts into words. This post will give a brief introduction to me and how I intend to use this blog.</p>
<h2 id="who-am-i">Who am I?</h2>
<p>My name is <strong>Nathan Knowler</strong>. I am a human being living in western Canada who codes to feed himself and his family.</p>
<h2 id="how-will-i-use-this-blog">How will I use this blog?</h2>
<p>I don’t want to pigeon-hole the content too much, but what I think readers can expect is my thoughts on code, music, and perhaps topics relating to real life.</p>]]></content:encoded>
        </item>
    </channel>
</rss>