{
  "id": "01J2HMEV2KH3WFXC55FCC3P31S",
  "slug": "a-custom-element-smoke-test",
  "title": "A custom element smoke test",
  "description": "A step many custom elements miss before shipping.",
  "publishedAt": "2024-07-11T19:31:25.395Z",
  "published": true,
  "html": "<p>It’s easy to create a custom element and forget that HTML elements can\nbe created programmatically with the DOM’s <code>createElement()</code> method.\nConsumers of your custom elements might do this or they might use a\nframework that is most definitely going to be doing this.</p>\n<p>So, a great <a href=\"https://en.wikipedia.org/wiki/Smoke_testing_(software)\"><i>smoke test</i></a> for custom elements is to try and\ncreate it programmatically:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">\"my-element\"</span>);\n</code></pre>\n<p>There’s a couple of exceptions this might throw:</p>\n<pre><code>DOMException: Failed to construct 'CustomElement': The result must not have children\n</code></pre>\n<p>In this case, you’re adding children to your custom element inside its\nconstructor.</p>\n<pre><code>DOMException: Failed to construct 'CustomElement': The result must not have attributes\n</code></pre>\n<p>In this case, you’re setting attributes on your custom element inside\nits constructor.</p>\n<p>The HTML parser isn’t going to surface these issues for you and so if\nthat’s all your testing with (i.e. you’re just writing plain text HTML),\nthen you could end up shipping something that’s broken.</p>\n<p>An important principle emerges from these cases: <strong>don’t do light DOM\noperations inside of the constructor.</strong></p>\n<h2 id=\"a-digression-on-sciopobia\">A digression on sciopobia</h2>\n<p>If you write “HTML Web Components” — <em>sciophobic</em> custom elements that\navoid using the Shadow DOM — you are likely going to be more prone to\nthis sort of issue as <a href=\"https://knowler.dev/blog/html-web-components-are-an-antipattern\">you’re creating elements against the grain of\nHTML</a>. It might seem easy enough to just not do stuff in the\nconstructor, however, using the light DOM to express the make up of a\ncustom element is naturally going to be more prone to these issues in\ngeneral which is why <a href=\"https://knowler.dev/blog/please-keep-your-hands-arms-and-legs-inside-the-custom-element\">I generally avoid it if I can</a>. When you ditch\nencapsulation this is what you get. The promise of “framework agnostic”\ncomponents does not look very promising with such an approach, since\nframeworks expect custom elements to behave as HTML elements do.</p>"
}
