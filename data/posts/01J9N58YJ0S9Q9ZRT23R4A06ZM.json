{
  "id": "01J9N58YJ0S9Q9ZRT23R4A06ZM",
  "slug": "to-define-custom-elements-or-not-when-distributing-them",
  "title": "To define custom elements or not when distributing them",
  "description": "Why not both?",
  "publishedAt": "2024-10-08T04:12:54.208Z",
  "published": true,
  "html": "<p>A few days ago, <a href=\"https://front-end.social/@rem/113248748478433268\">Remy Sharp was wondering about name collisions for custom elements</a> and <a href=\"https://sunny.garden/@knowler/113249247334407076\">I replied</a> with my opinion that custom element authors should allow their consumers to register the custom elements themselves and just export the class. This morning both <a href=\"https://gomakethings.com/user-defined-web-components/\">Chris Ferdinandi</a> and <a href=\"https://mastodon.gal/@misteroom/113266920063195955\">Ã“scar Otero</a> made posts about the convenience of a single script which had me rethinking my earlier suggestion.</p>\n<p>Personally, I still think that as a custom element author, I want to give my consumers the most flexibility for how to use a custom element Iâ€™ve created:</p>\n<ul>\n<li>I want to do what I can to help them avoid name collisions.</li>\n<li>I donâ€™t want to assume their conditions for defining a custom element.</li>\n<li>I want to support consumers who want to use <a href=\"https://wicg.github.io/webcomponents/proposals/Scoped-Custom-Element-Registries.html\">scoped custom element registeries</a> in the future.</li>\n</ul>\n<p>However, I began to wonder how I could add the convenience offered by a single script solution.</p>\n<p>I could just include an additional file that handles the definition:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">BlehBlehBlehElement</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./bleh-bleh-bleh-element.js\"</span>;\n\ncustomElements.<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-string\">\"bleh-bleh-bleh\"</span>, <span class=\"hljs-title class_\">BlehBlehBlehElement</span>);\n</code></pre>\n<p>But this really is such an insignificant amount of code <em>and</em> it introduces nested imports. The latter is resolvable with a <code>preload</code>, but it still creates complexity and a potential footgun for consumers.</p>\n<p>I also could create a bundle for that fileâ€¦ but I like to not use build tools whenever I can since I donâ€™t want the complexity myself.</p>\n<p>This got me thinking about <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta\"><code>import.meta</code></a>. For modules, <code>import.meta</code> includes the URL used to load the module. This means we can create an additional API for the module using its URLâ€™s search params.</p>\n<p>So in our case, we can just conditionally define the element when the <code>?define</code> search param is set:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// Export the class so the consumer can register the element with greater flexibility</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BlehBlehBlehElement</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n\t<span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n\t\t<span class=\"hljs-variable language_\">super</span>();\n\t\t<span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">attachShadow</span>({ <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">\"open\"</span> });\n\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-property\">innerHTML</span> = <span class=\"hljs-string\">\"ðŸ§›\"</span>;\n\t}\n}\n\n<span class=\"hljs-comment\">// Check if `?define` is set and if so, define it in the default registry</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">URL</span>(<span class=\"hljs-keyword\">import</span>.<span class=\"hljs-property\">meta</span>.<span class=\"hljs-property\">url</span>).<span class=\"hljs-property\">searchParams</span>.<span class=\"hljs-title function_\">has</span>(<span class=\"hljs-string\">\"define\"</span>)) {\n\tcustomElements.<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-string\">\"bleh-bleh-bleh\"</span>, <span class=\"hljs-title class_\">BlehBlehBlehElement</span>);\n}\n</code></pre>\n<p>Hereâ€™s how a consumer of the custom element would use it:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&#x3C;!doctype <span class=\"hljs-keyword\">html</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Bleh bleh bleh â€“ Drac<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">module</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">./bleh-bleh-bleh-element.js?define</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">bleh-bleh-bleh</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">bleh-bleh-bleh</span>></span>\n</code></pre>\n<p>Is this a bad idea? Sure, the script must be a module now (i.e. you must set <code>type=module</code> on its <code>&#x3C;script></code> element), but thatâ€™s likely a good thing.</p>\n<p>Anyway, I thought this was a pretty neat way to keep things simple for both a custom element author and consumer. Let me know what you think.</p>"
}
