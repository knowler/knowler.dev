{
  "slug": "extending-html-form-validation",
  "title": "Extending HTML Form Validation",
  "description": "A quick and practical introduction for using the Constraint Validation API to extend HTML Form Validation.",
  "publishedAt": "2022-11-23T01:26:11.931Z",
  "id": "01GJH1FBPV15BMDDBQ11VAE1M3",
  "published": true,
  "html": "<p>HTML is awesome; it includes so much out-of-the-box. For example,\n<code>&#x3C;form></code> will validate its controls upon submission and report if there\nare any validation errors. You can use attributes like <code>required</code>,\n<code>maxlength</code>, <code>pattern</code>, etc. to set the validation for different fields.\nWhile these can get you pretty far, sometimes you might want to provide\nsome more complex validation. Often, this is where developers plop\n<code>novalidate</code> on the <code>&#x3C;form></code> element and then use full replacement for\nthe browser’s built-in validation. Instead of replacing it, you can use\nthe Web platform’s Constraint Validation API to extend the built-in\nfunctionality.</p>\n<h2 id=\"using-the-constraint-validation-api\">Using the Constraint Validation API</h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Constraint_validation\">Constraint Validation\nAPI</a>\nallows one to add custom complex validation in their forms (among other\nthings not described in this post).</p>\n<p>Here’s an example: there are two text inputs that you want to be unique\nfrom each other. We’ll wrap them in a custom element, since they are\ngreat for bundling up this sort of functionality.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">unique-values</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">fieldset</span>></span>\n\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">legend</span>></span>Unique values<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">legend</span>></span>\n\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>A <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"a\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>B <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"b\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">fieldset</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">unique-values</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>Submit<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n</code></pre>\n<p>Now, let’s scaffold the custom element and listen for the <code>input</code> event\non the <code>&#x3C;fieldset></code>:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UniqueValues</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">fieldset</span>() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">':scope > fieldset'</span>); }\n\n  <span class=\"hljs-title function_\">connectedCallback</span>(<span class=\"hljs-params\"></span>) {\n\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fieldset</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'input'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =></span> {\n\t\t\t<span class=\"hljs-comment\">// <span class=\"hljs-doctag\">TODO:</span> set and report the validity.</span>\n\t\t});\n  }\n}\n\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">customElements</span>.<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-string\">'unique-values'</span>, <span class=\"hljs-title class_\">UniqueValues</span>);\n</code></pre>\n<p>The Constraint Validation API provides a few methods for setting,\nchecking, and reporting validity. We’ll use\n<code>.setCustomValidity(message)</code> and <code>.reportValidity()</code>. The first allows\nus to set a custom error message. The second is what spawns the tooltip\non a form control.</p>\n<p>We’ll use the <code>input</code> event as our validation logic isn’t very costly\nperformance-wise. This also follows how HTML seems to work. If you want\nto see for yourself, use CSS to style the <code>:invalid</code> state of a form\ncontrol with one the basic HTML validation constraints (e.g. <code>required</code>,\n<code>minlength</code>, <code>pattern</code>). The validity is checked as the input changes.</p>\n<p>In the <code>input</code> event handler for <code>&#x3C;fieldset></code>, we can compare the values\nof both nested controls, then set and report the validity accordingly.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fieldset</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'input'</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =></span> {\n\t<span class=\"hljs-keyword\">const</span> {a, b} = event.<span class=\"hljs-property\">currentTarget</span>.<span class=\"hljs-property\">elements</span>;\n\n\t<span class=\"hljs-keyword\">if</span> (a.<span class=\"hljs-property\">value</span> === b.<span class=\"hljs-property\">value</span>) {\n\t\t<span class=\"hljs-comment\">// If the values are the same, set the error, and report it on</span>\n\t\t<span class=\"hljs-comment\">// the current form control.</span>\n\t\ta.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">'A and B must be unique.'</span>);\n\t\tb.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">'A and B must be unique.'</span>);\n\t\tevent.<span class=\"hljs-property\">target</span>.<span class=\"hljs-title function_\">reportValidity</span>();\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\t<span class=\"hljs-comment\">// If the values aren’t the same, clear the error on each</span>\n\t\t<span class=\"hljs-comment\">// control.</span>\n\t\ta.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">''</span>);\n\t\tb.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">''</span>);\n\t}\n});\n</code></pre>\n<p>Now, if you pay close attention to how HTML’s built-in validation works,\nyou’ll notice that the tooltip doesn’t show until a submission attempt\nis made. I’m not presenting any hard opinion about whether or not you\nshould do the same. That’s a decision that’s best determined by research\nand context, but that’s outside of the scope of this blog post.</p>\n<p>You’ll also notice that HTML’s validation also takes place when the\nelements are first added to a page. We can move the event listener\ncallback into a method.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title function_\">connectedCallback</span>(<span class=\"hljs-params\"></span>) {\n\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">validate</span>();\n\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fieldset</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'input'</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">validate</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>));\n}\n\n<span class=\"hljs-title function_\">validate</span>(<span class=\"hljs-params\">event</span>) {\n\t<span class=\"hljs-keyword\">const</span> {a, b} = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fieldset</span>.<span class=\"hljs-property\">elements</span>; <span class=\"hljs-comment\">// Might as well use fieldset</span>\n\n\t<span class=\"hljs-keyword\">if</span> (a.<span class=\"hljs-property\">value</span> === b.<span class=\"hljs-property\">value</span>) {\n\t\ta.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">'A and B must be unique.'</span>);\n\t\tb.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">'A and B must be unique.'</span>);\n\t\t<span class=\"hljs-comment\">// We’ll optionally chain the report call as the event won’t be</span>\n\t\t<span class=\"hljs-comment\">// there on page load and it shouldn’t report immediately anyway.</span>\n\t\tevent?.<span class=\"hljs-property\">target</span>.<span class=\"hljs-title function_\">reportValidity</span>();\n\t} <span class=\"hljs-keyword\">else</span> {\n\t\ta.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">''</span>);\n\t\tb.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">''</span>);\n\t}\n}\n</code></pre>\n<p>Now, here is the code altogether. Remember, this is just a demo. This\ncode is not as robust as it could be (e.g. there are checks I’ve\nleft out, missing teardown, and it’s not very reusable).</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">unique-values</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">fieldset</span>></span>\n\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">legend</span>></span>Unique values<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">legend</span>></span>\n\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>A <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"a\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\t\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">label</span>></span>B <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"b\"</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">label</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">fieldset</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">unique-values</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>Submit<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"javascript\">\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UniqueValues</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">fieldset</span>() { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">':scope > fieldset'</span>); }\n\n\t<span class=\"hljs-title function_\">connectedCallback</span>(<span class=\"hljs-params\"></span>) {\n\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">validate</span>();\n\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fieldset</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">'input'</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">validate</span>.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>));\n\t}\n\n\t<span class=\"hljs-title function_\">validate</span>(<span class=\"hljs-params\">event</span>) {\n\t\t<span class=\"hljs-keyword\">const</span> {a, b} = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fieldset</span>.<span class=\"hljs-property\">elements</span>;\n\n\t\t<span class=\"hljs-keyword\">if</span> (a.<span class=\"hljs-property\">value</span> === b.<span class=\"hljs-property\">value</span>) {\n\t\t\ta.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">'A and B must be unique.'</span>);\n\t\t\tb.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">'A and B must be unique.'</span>);\n\t\t\tevent?.<span class=\"hljs-property\">target</span>.<span class=\"hljs-title function_\">reportValidity</span>();\n\t\t} <span class=\"hljs-keyword\">else</span> {\n\t\t\ta.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">''</span>);\n\t\t\tb.<span class=\"hljs-title function_\">setCustomValidity</span>(<span class=\"hljs-string\">''</span>);\n\t\t}\n\t}\n}\n\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">customElements</span>.<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-string\">'unique-values'</span>, <span class=\"hljs-title class_\">UniqueValues</span>);\n</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n</code></pre>\n"
}