{
  "id": "01HR7Q491X2DCJ7E0QDADX9Q2S",
  "slug": "algorithmic-functional-css",
  "title": "Algorithmic Functional CSS",
  "description": "Doing more with less.",
  "publishedAt": "2024-03-05T16:28:42.429Z",
  "published": true,
  "updatedAt": "2024-03-05T16:49:16.873Z",
  "html": "<p><strong>Functional CSS</strong> is the idea that provided the same input a CSS class should do the same thing. I’ve tricked you though, because this is just another name for utility CSS. Before Tailwind, <a href=\"https://github.com/tachyons-css/tachyons\">this is what a good chunk of those using the methodology called it</a>.</p>\n<p>Anyway, one development that I’ve really appreciated in <a href=\"https://github.com/enhance-dev/enhance-styles\">Enhance’s approach to functional CSS</a> is that they embrace fluid type and spacing. They aren’t the originators of that technique, but they were the first in my observation to pair it with a functional CSS approach—innovating in a space that has gotten kinda boring.</p>\n<p>Creating fluid utilities eliminates the need to generate breakpoint specific versions of spacing and type scale classes. That’s a whole chunk of CSS that never needs to be generated or accidentally left in a CSS bundle.</p>\n<p>Container queries and their units can take these fluid single-purpose classes even farther. We can use the same fluid function and get contextual results:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.pi</span> {\n  <span class=\"hljs-attribute\">padding-inline</span>: <span class=\"hljs-built_in\">clamp</span>(<span class=\"hljs-number\">0.5rem</span>, <span class=\"hljs-number\">0.5rem</span> + <span class=\"hljs-number\">5</span>cqi, <span class=\"hljs-number\">4rem</span>);\n  <span class=\"hljs-selector-pseudo\">:has</span>(> &#x26;) {\n    container-type: size;\n  }\n}\n</code></pre>\n<iframe src=\"https://knowler.dev/demos/Aq39_U0?codepen\" width=\"100%\" height=\"600px\" style=\"resize: inline\"></iframe>\n<p>Now instead of needing to create individual utilities for different points in a scale, we can put our scales into functions and maybe even provide different scales.</p>\n<p>So, is it functional CSS anymore, if it’s producing a different result?</p>\n<p>I think, yes.</p>\n<p>In the past, if we wanted to provide some input to a functional class <em>we</em> had to use a different class specifically for that input (i.e. a design token) or set a custom property related to it. It was <em>us</em> providing the input. When we use <a href=\"https://every-layout.dev/blog/algorithmic-design/\">CSS algorithms</a>, <a href=\"https://buildexcellentwebsit.es\">we let the browser provide the input</a>. Our functional CSS becomes algorithmic functional CSS.</p>"
}