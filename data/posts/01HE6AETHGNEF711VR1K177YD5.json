{
  "id": "01HE6AETHGNEF711VR1K177YD5",
  "slug": "website-devlog-november-1-2023",
  "title": "Website Devlog: November 1, 2023",
  "publishedAt": "2023-11-01T20:51:03.856Z",
  "published": true,
  "webmentions": [
    "bee8209b-38dc-403c-8198-7f7bd02e04b8"
  ],
  "html": "<p>My website is in continual development flux. I thought I’d provide a bit of an overview of how it’s built as of the first day of November in 2023.</p>\n<h2 id=\"priorities\">Priorities</h2>\n<p>Some priorities as I build:</p>\n<ul>\n<li>Use the Web platform.</li>\n<li>Try to build in a runtime-agnostic way.</li>\n<li>Going live should be fast and should not be easily blocked.\n<ul>\n<li>Being able to blog on a whim should never be blocked.</li>\n</ul>\n</li>\n<li>Avoid dependencies.</li>\n<li>It only needs to be maintainable for me.</li>\n<li>If you can’t do it right, don’t do it at all.\n<ul>\n<li>Do the minimum correctly rather than the maximum incorrectly.</li>\n</ul>\n</li>\n<li>Try to write some tests.</li>\n</ul>\n<h2 id=\"technologies\">Technologies</h2>\n<p>Some core technologies I’m using:</p>\n<ul>\n<li><a href=\"https://deno.land\">Deno</a> as the JavaScript runtime.\n<ul>\n<li>Using a capable runtime that focuses heavily on standards is important. No, I’m not using TypeScript.</li>\n</ul>\n</li>\n<li><a href=\"https://deno.com/deploy\">Deno Deploy</a> is how I’m sharing this website with the world.\n<ul>\n<li>With this being a one-person endeavour with not a tonne of risk, I don’t need many steps between the code in my editor and my live website. Deno Deploy’s “no-build” deploys are fast and support this workflow.</li>\n</ul>\n</li>\n<li><a href=\"https://hono.dev\">Hono</a> is its backend web framework.\n<ul>\n<li>Initially, I was stubbornly rolling my own sort of web framework that was largely inspired by <a href=\"https://github.com/satyarohith/sift\">Sift</a>, using Deno’s web server APIs directly, Web standard <code>Request</code> and <code>Response</code>, and <code>URLPattern</code> for routing. It was fun and learned a lot, but over time I found myself distracted by improving the capabilities of said framework. I also wanted something to easily employ middleware. Hono is simply and works with various runtimes.</li>\n</ul>\n</li>\n<li><a href=\"https://pugjs.org\">Pug.js</a> is the templating language.\n<ul>\n<li>Vanilla HTML is great, but when it comes to dynamic content, especially with attributes a lot of templating solutions are just not pleasant. I wanted a templating syntax that is designed for HTML, but also doesn’t try to be HTML (e.g. JSX). Pug does this very well. My only gripe with it is that the JS which it supports is missing some modern features (e.g. the null-coalescing operator, etc.). Pray that I don’t get distracted trying to write my own templating language in Rust.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"styling\">Styling</h2>\n<p>I’m taking a very exploratory and scaled-down approach to styling.</p>\n<ul>\n<li>Avoid introducing a build step as much as possible.</li>\n<li>Only ship the CSS that the page needs.</li>\n<li>Figure out how to leverage layers (i.e. <code>@layer</code>). I think layers can be a key for reducing how much CSS is shipped.</li>\n<li>Don’t solve problems before they need to be.</li>\n</ul>\n<p>Right now all I have is a “main” stylesheet which includes only the styles for the “public” template of the site. Then any page specific styles are just included in a <code>&#x3C;style></code> element within the <code>&#x3C;head></code>. The source of these route specific styles are actually in their own co-located stylesheets. Pug makes it pretty easy to do this:</p>\n<pre><code>append head\n  style: include route.css\n</code></pre>\n<p>Currently, the design is quite limited. I’ve intentionally put off fleshing out a complete colour scheme.</p>\n<h2 id=\"closing-thoughts\">Closing thoughts</h2>\n<p>Overall, I hope my approach preserves a space for my desire to experiment and explore, while helping me actually create tangible progress. I have a lot that I’d like to accomplish with this website. Much of that won’t actually be publicly accessible, since the most complex thing I’m building is my own personal CMS. We’ll see how it goes, but so far, even though it’s been a slow process building, this has been the most enjoyable personal website project and the one I have the most hope for.</p>",
  "updatedAt": "2023-11-08T05:58:23.463Z"
}