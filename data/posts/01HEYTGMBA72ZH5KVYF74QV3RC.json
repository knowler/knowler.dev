{
  "id": "01HEYTGMBA72ZH5KVYF74QV3RC",
  "slug": "extensible-web-components",
  "title": "Extensible Web Components",
  "description": "Why starting off with styling the Shadow DOM usually indicates a misunderstanding of its purpose.",
  "publishedAt": "2023-11-11T09:13:26.634Z",
  "published": true,
  "updatedAt": "2024-01-26T05:10:36.246Z",
  "webmentions": [
    "e2462d59-cb40-47b1-aabd-b70ee63f70a0",
    "458e7d08-b1c8-4235-b051-5c0d7da6ddf9",
    "868b1dba-6204-4fe4-98e2-ad61fff4c9fd",
    "62a106f2-c689-4236-bf15-ada49b519ecb",
    "24206af3-8199-458d-b6f9-21cc1fc34b69"
  ],
  "html": "<p>The promise of encapsulated styling is usually what attracts people to Web Components and it’s also where a lot of people get their start actually writing them. For many, that’s what Web Components are: bits of Shadow DOM with isolated styling. It certainly is one of the most magical aspects of them—especially for anyone who’s ever struggled with CSS. Writing CSS freely without a thought of specificity, existing styles to override, or just not breaking something else on the page seems liberating.</p>\n<p>It doesn’t take long for the euphoria to wear off. Often it’s replaced with confusion when people begin to introduce features like slots into their components. “What do you mean, <a href=\"https://shadowdom.style/\">the Light DOM styles take precedence over the Shadow DOM styles</a>? I thought it was supposed to be the opposite?” It’s also scandalizing for some to discover that, yes, CSS properties do inherit through a shadow root boundary and this is true for (unregistered) custom properties whose default behaviour is to inherit their value. This only ends up coming across that the Shadow DOM isn’t real encapsulation. Something with our mental model of Web Components isn’t quite right.</p>\n<h2 id=\"starting-with-styling-the-shadow-dom-is-a-misstep\">Starting with styling the Shadow DOM is a misstep</h2>\n<p>As I was watching and participating in numerous conversations about Web Components take place over the last few days, when <a href=\"https://sfba.social/@fonts/111383440314353875\">Robin Rendle pointed out that “Folks start with styles first[…]”</a> it made me realize the <em>starting with styles</em> is indicative of our misunderstanding of what Web Components are and where to start when we build them.</p>\n<p>The focus on isolated, scoped styles creates a sense that Web Components are meant to be closed off as a default. To be frank, this is against the grain they were built. We might as drop the “Web” from Web Components if this is what we expect.</p>\n<p>In reality, the way that features like slots work (i.e. the CSS <code>::slotted()</code> selector used for styling slotted Light DOM content from the Shadow DOM), having less precedence over the styles for the actual slotted Light DOM content, and the same for CSS Parts used to expose elements from the Shadow DOM for styling outside, show us that Web Components were designed for extension.</p>\n<h2 id=\"the-web-is-extensible\">The web is extensible</h2>\n<p>Extensibility is an underlying principle of the web. Web Components do not deviate from this principle. Features like slots and CSS parts should be embraced when using the Shadow DOM. Why? Because they empower the extension of what is already there and they allow the extension of what they introduce.</p>\n<p>Often, the impulse I see in people (myself included) in building Web Components is to move chunks of their markup and styles to the Shadow DOM. Doing this closes off that markup and those styles from extension. This is a choice that will get us in loads of trouble. Not only is that content inaccessible without the use of JavaScript, potentially fraught with technical and accessibility bugs, but now we’ve limited its ability to extend the existing Light DOM and to be extended with CSS.</p>\n<p>Our approach to Web Components should be one that is open by default. We should embrace extensibility in our designs and build with <a href=\"https://en.wikipedia.org/wiki/Rule_of_least_power\">the rule of least power</a> in mind. I think in practice this means adopting approaches like <strong>progressive enhancement</strong>. When this is our approach, we realize that the Light DOM is where we should start and that it serves as valuable foundation to extend.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Now, I hope that I haven’t come across as being dismissive of the Shadow DOM. I actually think it’s pretty great, but what I hope I’ve done, is highlight that when it’s the first and only thing we focus on for Web Components, we actually misunderstand how to use it and it’s purpose.</p>\n<p>In the future, I’ll expand on my thoughts of <a href=\"https://knowler.dev/blog/a-mental-model-for-styling-the-shadow-dom\">how to best understand writing styles for the Shadow DOM</a> that lead to a more extensible web. I think understanding Web Components as being extensible makes styling the Shadow DOM make a lot of sense.</p>\n<p>Today, I encourage you to get started with Web Components. Start with the most humble and least powerful thing: <em>a custom element</em>—no CSS or JavaScript required (though, a different <code>display</code> property might be a good idea).</p>"
}