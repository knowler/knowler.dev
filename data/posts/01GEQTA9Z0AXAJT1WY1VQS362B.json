{
  "slug": "managing-event-listeners-in-custom-elements",
  "title": "Managing event listeners in custom elements",
  "publishedAt": "2022-10-06T23:33:00.000Z",
  "id": "01GEQTA9Z0AXAJT1WY1VQS362B",
  "published": true,
  "html": "<p>When managing event listeners in custom elements, there tends to be a\nbit of boilerplate that needs to be done for <em>every</em> event listener:</p>\n<ul>\n<li>Storing the bound event listener as a property of the class inevitably\nin the constructor (so remember to call <code>super()</code>);</li>\n<li>Adding the event listener;</li>\n<li>Removing the event listener.</li>\n</ul>\n<p>It might not seem like a lot, but your custom element’s class can easily\nget a bit bloated.</p>\n<p>A little known and newer feature of <a href=\"http://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\"><code>EventTarget.addEventListener()</code></a>\nis the <code>signal</code> property in the options object which it takes as a third\nparamter. It expects an <a href=\"http://developer.mozilla.org/en-US/docs/Web/API/AbortSignal\"><code>AbortSignal</code></a> which it will use to remove\nthe event listener. You can get and call an <code>AbortSignal</code> with an\n<a href=\"http://developer.mozilla.org/en-US/docs/Web/API/AbortController\"><code>AbortController</code></a>. I store this on a base class which extends\n<code>HTMLElement</code>, create an easy accessor for the <code>AbortSignal</code>, and then\ncall <a href=\"http://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort\"><code>AbortController.abort()</code></a> in <code>disconnectedCallback()</code>:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BaseElement</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n\t#disconnectionController = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();\n\n\tdisconnectSignal = <span class=\"hljs-variable language_\">this</span>.#disconnectionController.<span class=\"hljs-property\">signal</span>;\n\n\t<span class=\"hljs-title function_\">disconnectedCallback</span>(<span class=\"hljs-params\"></span>) {\n\t\t<span class=\"hljs-variable language_\">this</span>.#disconnectionController.<span class=\"hljs-title function_\">abort</span>(<span class=\"hljs-string\">\"element disconnected\"</span>);\n\t}\n}\n</code></pre>\n<p>My custom elements can just extend the base element class and use the\n<code>AbortSignal</code> when adding event listeners:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyButton</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">BaseElement</span> {\n\t<span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">button</span>() {\n\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">':scope > button'</span>);\n\t}\n\n\t<span class=\"hljs-title function_\">connectedCallback</span>(<span class=\"hljs-params\"></span>) {\n\t\t<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">button</span>.<span class=\"hljs-title function_\">addEventListener</span>(\n\t\t\t<span class=\"hljs-string\">'click'</span>,\n\t\t\t<span class=\"hljs-variable language_\">this</span>.#onClick.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>),\n\t\t\t{ <span class=\"hljs-attr\">signal</span>: <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">disconnectSignal</span> },\n\t\t);\n\t}\n\n\t#<span class=\"hljs-title function_\">onClick</span>(<span class=\"hljs-params\">event</span>) { <span class=\"hljs-comment\">/* Handle event */</span> }\n}\n</code></pre>\n<p>Since you don’t need to remove the event listener manually, you can even\nuse a closure instead of creating a class method. It’s up to you.</p>\n<h2 id=\"browser-support\">Browser Support</h2>\n<p>If you don’t need to support Safari prior to 15 on macOS and iOS then\nyou are good to go. <a href=\"https://caniuse.com/mdn-api_eventtarget_addeventlistener_options_parameter_options_signal_parameter\">Take a look at the support table</a>.</p>\n"
}
