{
  "id": "01J0F0W9HB8KV1B9CFE0CQX2G4",
  "slug": "maintaining-dotfiles",
  "title": "Maintaining dotfiles",
  "description": "A dotfiles maintenance technique that has worked for me.",
  "publishedAt": "2024-06-15T22:39:22.155Z",
  "published": true,
  "html": "<aside role=\"note\">\n<p>I wrote this a number of years ago and had it on my site at a\ndifferent path. I noticed it was linked from another one of my pages, so\nI figured I’d re-publish it here on my blog. Ironically, I haven’t\ntouched my dotfiles for a few years, but that’s because I had to fork\nthem for work to store them privately and that’s what I now maintain.</p>\n</aside>\n<p>When it comes to maintaining anything that serves a sort of background\nfunction for more important things, it is vital to ensure that the\nmaintainence process is simple, otherwise, there will be stagnation and\nthat thing won’t be serving its purpose. When it comes to dotfiles, I\ndon’t believe there is necessarily a best way to maintain them, however,\nyour maintainence methods should suit your strengths.</p>\n<p>Mine is <strong>Git</strong>.</p>\n<p>I’ve used Git for a number of years and it is a tool that I use every\nday. For many developers, I am sure this is also the case, though I\nexpect that many might not feel adequately strong at using Git. I still\nthink that a maintainence workflow that favours Git is the best route\nfor most of these developers, because the main alternative is a workflow\nthat, while it does use Git, primarily depends on a shell’s linking\ncapabilities (i.e. <code>ln</code>), and from my observation and experience, most\ndevelopers are much less confident here.</p>\n<p>That was the case with myself. I found myself spending a long time\nwriting shell scripts for linking files or using scripts that required a\ntendious degree of maintainence in order to add new files or simply to\nmove files, along with a lot of time spent on trial and error — which is\nscary to do when you just need your system to work for more important\ntasks. This usually resulted a stale dotfiles repository and a lot less\ncare for my local dotfiles or even fear towards modifying (or fixing)\ndifferent configurations.</p>\n<p>In 2020, after a number of issues with my computer hardware which\nrequired me to setup at least 3 different fresh OS installs for my work,\nI decided that I needed to find a solution for my dotfiles so that I\ncould reduce how much time it was taking me to get to work.</p>\n<h2 id=\"the-bare-repository-method\">The Bare Repository Method</h2>\n<p>I stumbled upon an article by Atlassian called <a href=\"https://www.atlassian.com/git/tutorials/dotfiles\">“The best way to store\nyour dotfiles: A bare Git repository.”</a>\nI had never heard of a bare Git respository and since I had been digging\ndeep into Git, I was curious. After reading the article, I gave the\nsetup a try in a new respository on my GitHub and very quickly realized\nthat this was a much easier way to manage dotfiles, and I converted my\nmain repo over.</p>\n<p>A bare repository is essentially just the <code>.git</code> directory without a\nchecked out worktree. A setup looks like cloning your dotfiles as a bare\nrepo. Usually it is advisable to use something other than <code>.git</code>, I use\n<code>.dotfiles</code> in my home directory. Then you create checkout a worktree in\nyour home directory. Now, you might wonder, <em>wouldn’t that display\neverything as potential files to track when I run <code>git status</code>?</em> Yes, it\ndoes, however, this is easily solvable, by turning off untracked files\nin your status config for the repository.</p>\n<h3 id=\"clone-the-repo\">Clone the repo</h3>\n<pre><code class=\"hljs language-shell\">git clone &#x3C;repo> &#x3C;git-dir-path> --bare\n</code></pre>\n<h3 id=\"do-not-show-untracked-files-in-git-status-for-the-repo\">Do not show untracked files in git status for the repo</h3>\n<pre><code class=\"hljs language-shell\">git --git-dir=&#x3C;git-dir-path> config status.showUntrackedFiles no\n</code></pre>\n<h3 id=\"checkout-the-worktree-in-your-home\">Checkout the worktree in your <code>$HOME</code></h3>\n<pre><code class=\"hljs language-shell\">git --git-dir=&#x3C;git-dir-path> --work-tree=$HOME checkout\n</code></pre>\n<h3 id=\"manage-dotfiles-using-git\">Manage dotfiles using Git</h3>\n<p>You will need to prefix your Git commands with the path to the Git\ndirectory and the worktree path:</p>\n<pre><code class=\"hljs language-shell\">git --git-dir=&#x3C;git-dir-path> --work-tree=$HOME &#x3C;command>\n</code></pre>\n<p>It is best to create an alias for this.</p>\n<pre><code class=\"hljs language-shell\">alias dots=\"git --git-dir=&#x3C;git-dir-path> --work-tree=$HOME\"\n</code></pre>\n<p>Now, you can use this alias however you would use Git.</p>\n<pre><code class=\"hljs language-shell\">dots add ~/.config/nvim/init.vim\n\ndots commit -m \"Add Neovim config\"\n\ndots push\n</code></pre>"
}
