{
  "slug": "gg-a-git-directory-jumping-helper",
  "title": "gg: a Git directory jumping helper",
  "publishedAt": "2019-02-22T14:20:00.000Z",
  "id": "01D4AS7HM0ER6KEXDZTK1Z8P6W",
  "published": true,
  "html": "<p>Large projects and mono repos can be a pain to navigate. <strong>gg</strong>\nis a small script I use almost everyday to make it easier.</p>\n<p>If you’ve ever worked with WordPress — or really most CMSes for\nthat matter — the base application configuration, themes,\nplugins, etc. are typically given their own sub directories to\nhelp isolate them. For WordPress development, I use the\n<a href=\"https://roots.io\">Roots</a> stack and it does a great job of\nmaking the project structure relavant, however, since it is\nstill WordPress, the project structure is not exactly flat.\nOften I’ll need to jump to Trellis’ directory to start the\ndevelopment VM, run a deploy, or update an environment’s\nconfiguration, but shortly after jump back to the directory of\nthe theme or plugin I’m working on. Remembering the level of\ndepth and simply writing out the path can be a tedious and\nerroneous task.</p>\n<h2 id=\"a-simple-solution\">A simple solution</h2>\n<p><strong>gg</strong> is a very simple Bash script I wrote to make is 100%\neasier to jump between directories in a large project. Here’s a\nshort clip of it in action with a Roots project:</p>\n<p>{{ youtube(id=\"w0SjUNTfzKk\", class=\"youtube\") }}</p>\n<h2 id=\"breaking-down-the-script\">Breaking down the script</h2>\n<p>There are a few requirements you will need before you get started:</p>\n<p><strong>Requirements</strong>: <code>git</code>, <a href=\"https://github.com/junegunn/fzf\"><code>fzf</code></a>, <a href=\"https://github.com/sharkdp/fd\"><code>fd</code></a>, <a href=\"https://github.com/ggreer/the_silver_searcher\"><code>ag</code></a></p>\n<p>You most likely should be able to achieve the same thing with\nbuilt-in tools or alternatives to <code>fd</code> and <code>ag</code> (maybe even\n<code>fzf</code>), but for this tutorial, I’ll use the tools listed above.\nOne note before diving into the script, I do have the following\nset for my FZF default command:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">export</span> FZF_DEFAULT_COMMAND=<span class=\"hljs-string\">'ag -g \"\"'</span>\n</code></pre>\n<p>The script itself is pretty simple. There are two parts to it.\nFirst, if we want to see all of the directories within our\nproject, even if we are already in a nested directory, we will\nneed to jump to the root of the Git repo. Luckily, it is\nrelatively easy to do this with Git. Using Git’s <code>rev-parse</code>\nsubcommand with the <code>--show-toplevel</code> flag, we can get “the\nabsolute path of the top-level-directory.” Since this is useful\nin itself, but still a tad cumbersome to remember and write out,\nwe’ll create a function for it:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">gr</span></span>() {\n  <span class=\"hljs-built_in\">cd</span> `git rev-parse --show-toplevel`\n}\n</code></pre>\n<p>If you already have a set of Git-aliases, you might find naming\nconflicts with the ones I will create in this tutorial and in\nthat case, or in the case you don’t like the names I’ve picked,\nyou will need to use a different name.</p>\n<p>The next step is to create an easy way to find a sub-directory.\nIf you’ve ever used a fuzzy-search tool, you’ll know that that\nthey are pretty great. Knowing the fuzzy-search capabilities of\n<code>fzf</code>, I know I can do something like <code>cd $(fzf)</code> to almost\nachieve what we’re looking for, however, that finds directories\nand files, the latter of which we do not need. Luckily, we can\nuse a finder tool with <code>fzf</code> to get what we need. I’ll use <code>fd</code>\nto achieve this:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">gd</span></span>() {\n  <span class=\"hljs-built_in\">cd</span> `\n    fd --<span class=\"hljs-built_in\">type</span> d --hidden --follow --exclude .git \\\n    | fzf --preview <span class=\"hljs-string\">\"ls -Ap {}\"</span>\n  `\n}\n</code></pre>\n<p>We are telling <code>fd</code> to just find directories, follow symbolic\nlinks, allow hidden directories, but exclude the <code>.git</code>\ndirectory. Luckily, <code>fd</code> already respects <code>.gitignore</code> so we do\nnot need to worry about dependencies or build files polluting\nour search selection. Also, we are making it fancy with a\npreview window of the selected directory’s contents.</p>\n<p>I prefer to leave these as separate functions in case I want to\njust jump to the Git repo root or jump to a sub-directoy within\nthe current directory. For the final <code>gg</code> command, we can just\nuse an alias:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-built_in\">alias</span> gg=<span class=\"hljs-string\">\"gr &#x26;&#x26; gd\"</span>\n</code></pre>\n<p>And that’s it. Here’s the full and final script:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"hljs-meta\">#!/usr/bin/env bash</span>\n\n<span class=\"hljs-comment\"># Go to Git root</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">gr</span></span>() {\n  <span class=\"hljs-built_in\">cd</span> `git rev-parse --show-toplevel`\n}\n\n<span class=\"hljs-comment\"># Go to sub-directory</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">gd</span></span>() {\n  <span class=\"hljs-built_in\">cd</span> `\n    fd --<span class=\"hljs-built_in\">type</span> d --hidden --follow --exclude .git \\\n    | fzf --preview <span class=\"hljs-string\">\"ls -Ap {}\"</span>\n  `\n}\n\n<span class=\"hljs-comment\"># Go to a directory within the current Git repository</span>\n<span class=\"hljs-built_in\">alias</span> gg=<span class=\"hljs-string\">\"gr &#x26;&#x26; gd\"</span>\n</code></pre>\n"
}
