{
  "id": "01HVKPTVGER0BQ2M2DAXPX7AM4",
  "slug": "self-hosting-code-demos",
  "title": "Self-hosting code demos",
  "description": "How and why I’m self-hosting my own code demos.",
  "publishedAt": "2024-04-16T15:01:32.302Z",
  "published": true,
  "html": "<p>Often in my work, I have ideas or encounter problems that I just have to work out in a sandbox. For a long time and like many others, I’ve used <a href=\"https://codepen.io\">CodePen</a> for this. It’s honestly one of my favourite websites on the web — one that I visit at least once a day, if not more.</p>\n<p>As great as CodePen is, I’ve wished that I could have a tool that works offline, uses my own editing environment, and can be self-hosted. After attempting this on numerous occasions, a few months ago I began work on a solution that has since stuck.</p>\n<h2 id=\"first-iteration\">First iteration</h2>\n<p>Since my website already separates content from source code, it was easy for me to scaffold out what I needed to serve a new type of content. Demos are hosted under the <code>/demos/:demoId</code> route. At this point there is no index, which is partly by design — at least for now anyway.</p>\n<p>For the local code environment, I wanted to keep it real simple and avoid dependencies where possible. Currently, I just scaffold out the files — <code>demo.pug</code>, <code>demo.css</code>, and <code>demo.js</code> — in a temporary directory, open the <code>demo.pug</code> file in my editor, then start up a simple server that uses a web socket to reload the page when the files change. When the process for the editor exits, then the program will prompt if I’d like to publish the demo and if so, what I’d like to title it and if I’d like to add a description for it too. If I choose to publish, it will connect to my website’s database and store the demo there.</p>\n<p>I thought that CodePen’s random, but short URLs for pens were nice since they’re easier to type out, especially when copy and paste isn’t an option. For this, I’m using <a href=\"https://github.com/y-gagar1n/nanoid-good\"><code>nanoid-good</code></a> to both generate the short ID and keep it safe for work (just in case).</p>\n<p>The CLI for the tool allows for editing, deleting, and forking my demos. Since my fingers have CodePen’s <code>pen.new</code> URL in their muscle memory, I’ve aliased my tool as <code>pen</code> locally. Here’s the full API:</p>\n<ul>\n<li>\n<p>Creating a demo:</p>\n<ul>\n<li><code>pen</code></li>\n<li><code>pen new</code></li>\n</ul>\n</li>\n<li>\n<p>Editing a demo:</p>\n<ul>\n<li><code>pen [ID or URL]</code></li>\n<li><code>pen edit [ID or URL]</code></li>\n</ul>\n</li>\n<li>\n<p>Forking a demo:</p>\n<ul>\n<li><code>pen fork [ID or URL]</code></li>\n</ul>\n</li>\n<li>\n<p>Deleting a demo:</p>\n<ul>\n<li><code>pen delete [ID or URL]</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"compatibility-with-codepen\">Compatibility with CodePen</h2>\n<p>Since I do want others to be able to remix my demos, but I don’t want to provide a coding environment for them to do so, often when I share a demo I’ll tag on a <code>codepen</code> search param to the URL which will cause it render a button which can open the demo in CodePen. This uses <a href=\"https://blog.codepen.io/documentation/prefill/\">CodePen’s Prefill API</a> which is really nice and it works without JavaScript — all you need is a good old HTML form:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">method</span>=<span class=\"hljs-string\">post</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">https://codepen.io/pen/define</span> <span class=\"hljs-attr\">target</span>=<span class=\"hljs-string\">_blank</span>></span>\n  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">data</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">\"…\"</span>></span>Open in CodePen<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">form</span>></span>\n</code></pre>\n<p>I’ve omitted the content of the <code>value</code> attribute in the snippet above. CodePen expects a JSON object that has <code>html</code>, <code>css</code>, and <code>javascript</code> properties with their respective contents. I even include the demo’s <code>title</code> and <code>description</code> which will prefill those fields in CodePen.</p>\n<h2 id=\"how-im-using-this\">How I’m using this</h2>\n<p>As I noted at the start, I use this frequently for experimenting and if I need to work out a bug. One very helpful use case I’ve found for it is creating test reductions for browser bugs. When I find a bug, I’ll create a demo to start working on the test case. Sometimes I’m able to create a test case quickly, other times it becomes a part of my backlog. In any case, once I have a reduced test, instead of sharing the URL itself, I’ll save the HTML from the browser and use that as an attachment in the bug I file. I’d like to avoid link rot where I can, so reducing how many demo URLs I share publicly is ideal. Since the HTML is very simple and doesn’t contain dependencies, it keeps the test case focused and portable.</p>\n<h2 id=\"some-ideas-for-the-future\">Some ideas for the future</h2>\n<p>I’d love to make this <strong>offline-first</strong>. I have begun working on a local UI for managing my demos, but right now the tool’s only storage is my website. Being able to store drafts locally would be a really nice addition.</p>\n<p>Since I value progressive enhancement and that includes leveraging the server, I’d like this tool to support server-side code as well. This would break compatibility with CodePen, but I’m fine with that (for the demos that include server-side code). A degree of caution will be necessary for implementing this, since it’ll likely involve using <code>exec()</code> for code that is stored to the database.</p>\n<p>An <code>export</code> command for the CLI tool could improve my browser bug filing experience.</p>\n<p>Keeping track a demo’s webmentions would help me control link rot to a degree.</p>\n<p>Finally, one day it would be nice to provide my own web-based editor. I could use a service worker to allow for server side code snippets to work.</p>\n<h2 id=\"a-demo-and-encouragement\">A demo and encouragement</h2>\n<p>I guess I should include a demo of this too:</p>\n<iframe src=\"https://knowler.dev/demos/PFal20K?codepen\" width=\"100%\" height=\"300px\"></iframe>\n<p>While hosting your own written content is a good idea, don’t stop there: host your code snippets and demos too!</p>",
  "updatedAt": "2024-04-16T15:18:19.618Z"
}
