{
  "id": "01HEJWBQ3CWBWJS1HZS7VF3H4B",
  "slug": "context-matters-for-semantic-html",
  "title": "Context matters for semantic HTML",
  "description": "An invitation to learn HTML semantics beyond tag names.",
  "publishedAt": "2023-11-06T17:54:49.580Z",
  "published": true,
  "webmentions": [
    "7559a0ff-8f10-4c4e-9d36-23591272d1ef",
    "0b484522-a5e7-4b2a-958c-cfa0a6949c61",
    "89033fc7-82b3-45cb-b692-9efa98581991",
    "3f0c48de-de51-4055-aa2c-1662a617aec3"
  ],
  "updatedAt": "2023-11-08T05:15:30.938Z",
  "html": "<p>I see three stages to learning semantic HTML.</p>\n<p><strong>The first stage is <em>expanding your vocabulary</em></strong> beyond using <code>&#x3C;div></code>, <code>&#x3C;span></code>, and other special elements (e.g. <code>&#x3C;a></code>, <code>&#x3C;button></code>, <code>&#x3C;input></code>, etc.). Often at this stage, HTML authors will tap into a wider vocabulary of elements, but use them as it makes sense to them. For example, I’ve seen card elements created like this:</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"card\"</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n</code></pre>\n<p>While this might make a bit more sense to the person who wrote the code—this is a misuse of semantics, which leads me to the second stage…</p>\n<p><strong>The second stage is <em>understanding the semantics of the elements beyond their tag name</em>.</strong> This means understanding what <abbr title=\"Accessible Rich Internet Applications\">ARIA</abbr> role they map to. For example, while some are straightforward like the <code>&#x3C;main></code> element having the role of <code>main</code>, others are a bit different, like the <code>&#x3C;header></code> element mapping to the <code>banner</code> role or the <code>&#x3C;footer></code> element mapping to the <code>contentinfo</code> role.</p>\n<p>The third is similar to the second and perhaps could be understood as the second learned correctly. <strong>The third stage is <em>understanding that the context an element is used in affects its meaning</em>.</strong> So for that last example: the <code>&#x3C;header></code> element maps to the <code>banner</code> role and the <code>&#x3C;footer></code> element maps to the <code>contentinfo</code> role—that is only true if they’re used in a specific context.</p>\n<p>The following are two common examples where the <code>&#x3C;header></code> and <code>&#x3C;footer></code> elements would <strong>not</strong> have any corresponding ARIA role since they’re being used as a descendant of the <code>&#x3C;main></code> element or a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Content_categories#sectioning_content\">sectioning content</a> element (i.e. <code>article</code>, <code>section</code>, <code>nav</code>, <code>aside</code>).</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n</code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">article</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">article</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n</code></pre>\n<p>In the next example, the <code>&#x3C;header></code> and <code>&#x3C;footer></code> elements are direct descendants of the <code>&#x3C;body></code> element and therefore have their respective <code>banner</code> and <code>contentinfo</code> roles.</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n</code></pre>\n<p>This doesn’t mean that your <code>&#x3C;header></code> or <code>&#x3C;footer></code> elements must be at the top-level as direct descedants of the <code>&#x3C;body></code> element. You can wrap them in a <code>&#x3C;div></code> element (or layers of <code>&#x3C;div></code> elements).</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">header</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">header</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span>\n\t\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">footer</span>></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">footer</span>></span>\n\t<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n</code></pre>\n<p>Also, this doesn’t mean that you shouldn’t use <code>&#x3C;header></code> or <code>&#x3C;footer></code> within sectioning elements. Just make sure you’re not expecting them to do anymore than be a slight improvement of the developer experience over using <code>&#x3C;div></code>. Their more forgiving nature lends them to be helpful for that use unlike an element like <code>&#x3C;main></code> which you should only use in its appropriate context.</p>\n<p>Personally, I tend to avoid using those element outside of contexts where they have more semantic meaning, because I think it makes the HTML source more clear and it means I can be less specific when writing CSS (i.e. if there’s only one <code>&#x3C;header></code> element on the page, there isn’t going to be any conflict if I use a simple selector like the <code>header</code> type selector). Instead of using <code>&#x3C;div></code>, I might use a custom element name like <code>article-header</code>. If you do this, just keep in mind that you’ll likely want to assign a different CSS <code>display</code> value to these elements since the default is <code>inline</code>.</p>\n<p>There’s a lot more that can be said on this topic, like if there is more than one <code>&#x3C;nav></code> element on a page they should have different accessible names or that <code>&#x3C;section></code> doesn’t really do much on its own (see <a href=\"https://toddl.dev/posts/section-is-the-new-div/\">Todd Libby’s article, “<code>&#x3C;section></code> is the new <code>&#x3C;div></code>”</a> or <a href=\"https://www.scottohara.me/blog/2021/07/16/section.html\">Scott O’Hara’s article, “Accessibility of the section element”</a>). I guess this is my invitation to you to look deeper into the meaning behind the elements we use and understand the real effects they have on people consuming the HTML documents we author.</p>"
}
