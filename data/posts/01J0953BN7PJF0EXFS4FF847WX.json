{
  "id": "01J0953BN7PJF0EXFS4FF847WX",
  "slug": "html-web-components-are-an-antipattern",
  "title": "HTML Web Components are an antipattern…",
  "description": "It’s just a little sugar on today’s best practices",
  "publishedAt": "2024-06-13T15:57:41.415Z",
  "published": true,
  "html": "<p>“HTML Web Components” are an antipattern if our goal is to create custom\nHTML elements. They market themself as being “HTML” but they don’t let\nyou create custom elements like what we have in HTML. They’re just a\nslight improvement on existing authoring practices that get you no\nfurther than where those practices can get you today. If you want a path\nto better custom elements — ones that are actually like what we get in\nHTML — then this isn’t it. Sure, they might be useful for today, I’m not\nagainst that, but they do not enable us to create custom elements like\nthose we find in HTML. Take a good, hard look at HTML and you’ll see\nwhat I mean.</p>\n<p>With this I’m not saying the Shadow DOM is perfect — it’s not ready for\nevery use case yet, especially ones that require a high degree of\ncustomization or have complex accessibility requirements. The Web\nComponents APIs simply aren’t done yet. We need to realize this. Yes,\nwe’ve got some helpful APIs we can use today with a lot of success (use\nthem!), but we really damn the whole project when we treat it like its\ndone and then compare it to mature frameworks. Yes, it’s a slow process\nand that’s frustrating, but it turns out that <a href=\"https://infrequently.org/2012/04/bedrock/\">unearthing the Web Platform\nfrom browser engines</a> is not\na small task and we really should be glad there’s an iterative process\nthat allows us to start using some APIs along the way.</p>\n<p>We don’t need to stop using the pattern, but realize what it is: a nice\nimprovement upon today’s best practices. One day you’ll be able to\ncreate custom HTML elements that are more like HTML than today’s best\npractices: they encapsulate what defines them and allow consumers to use\ntheir full surface as an API to extend them (HTML Web Components take up\nthis surface area to define themselves). Do not let the limitations of\nthe Web Components APIs today stop you from using them in situations\nthat make sense or, more importantly, from imagining how we might build\nthe custom elements of tomorrow.</p>"
}
