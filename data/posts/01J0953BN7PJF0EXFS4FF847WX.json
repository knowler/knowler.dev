{
  "id": "01J0953BN7PJF0EXFS4FF847WX",
  "slug": "html-web-components-are-an-antipattern",
  "title": "“HTML Web Components” are an antipattern…",
  "description": "It’s just a little sugar on today’s best practices",
  "publishedAt": "2024-06-13T15:57:41.415Z",
  "published": true,
  "html": "<p>“HTML Web Components” are an antipattern if our goal is to create custom HTML elements. This pattern is marketed as being “HTML,” because they promote just using tried-and-true light DOM in custom elements instead of the Shadow DOM, but they don’t let you create custom elements like what we have in HTML. They’re just a slight improvement on existing authoring practices that get you no further than where those practices can get you today. If you want a path to better custom elements — ones that are actually like what we get in HTML — then this isn’t it. Sure, they might be useful for today, I’m not against that, but they do not enable us to create custom elements like those we find in HTML — we’ll need APIs like the Shadow DOM and <code>ElementInternals</code> for that. Take a good, hard look at HTML and you’ll see what I mean.</p><p>With this I’m not saying the Shadow DOM is perfect — it’s not ready for every use case yet, especially ones that require a high degree of customization or have complex accessibility requirements. The Web Components APIs simply aren’t done yet. We need to realize this. Yes, we’ve got some helpful APIs we can use today with a lot of success (use them!), but we really damn the whole project when we treat it like its done and then compare it to mature frameworks. Yes, it’s a slow process and that’s frustrating, but it turns out that <a href=\"https://infrequently.org/2012/04/bedrock/\">unearthing the Web Platform from browser engines</a> is not a small task and we really should be glad there’s an iterative process that allows us to start using these APIs along the way.</p><p>We don’t need to stop using the pattern, but realize what it is: a nice improvement upon today’s best practices. One day you’ll be able to create custom HTML elements that are more like HTML than today’s best practices: they encapsulate what defines them and allow consumers to use their full surface as an API to extend them. “HTML Web Components” take up this surface area to define themselves and that removes or convolutes an important vector for consumers to use our components — not just when they first render, but afterwards as well. Built-in HTML elements are dynamic and not static. No framework necessary. Not only do their attributes serve as an API for configuration, but their children do as well. You simply cannot do that well when you’re using its (light) subtree as a rendering target.</p><p>Do not let the limitations of the Web Components APIs today stop you from using them in situations that make sense or, more importantly, from imagining how we might build the custom elements of tomorrow.</p>"
}
